//DIGITAL FILTER DESIGN

module fir(
    input clk,
    input reset,
    input signed [7:0] x,              // 8-bit input
    output reg signed [15:0] y         // 16-bit output
);
    // Coefficients
    parameter signed [7:0] h0 = 8'd1;
    parameter signed [7:0] h1 = 8'd2;
    parameter signed [7:0] h2 = 8'd3;
    parameter signed [7:0] h3 = 8'd2;
    parameter signed [7:0] h4 = 8'd1;

    // Shift registers to store past inputs
    reg signed [7:0] x_reg [0:4];
    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < 5; i = i + 1)
                x_reg[i] <= 0;
            y <= 0;
        end else begin
            // Shift input samples
            for (i = 4; i > 0; i = i - 1)
                x_reg[i] <= x_reg[i-1];
            x_reg[0] <= x;

            // Multiply and accumulate
            y <= h0*x_reg[0] + h1*x_reg[1] + h2*x_reg[2] + h3*x_reg[3] + h4*x_reg[4];
        end
    end
endmodule


//TESTBENCH

module firtb_n;
    reg clk;
    reg reset;
    reg signed [7:0] x;
    wire signed [15:0] y;

    fir_filter uut (
        .clk(clk),
        .reset(reset),
        .x(x),
        .y(y)
    );

    initial begin
        $dumpfile("fir_filter.vcd");
        $dumpvars(0, tb_fir_filter);

        clk = 0;
        reset = 1;
        x = 0;
        #10 reset = 0;

        // Apply sample inputs
        x = 8'd1; #10;
        x = 8'd2; #10;
        x = 8'd3; #10;
        x = 8'd4; #10;
        x = 8'd5; #10;
        x = 8'd0; #10;
        x = 8'd0; #10;
        x = 8'd0; #10;
        x = 8'd0; #10;

        $finish;
    end

    always #5 clk = ~clk;  // Clock generation
endmodule

